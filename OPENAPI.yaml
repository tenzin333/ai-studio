openapi: 3.0.3
info:
  title: Your API Name
  description: Brief description of your API
  version: 1.0.0
  contact:
    name: Your Name
    email: your.email@example.com

# Define your server URLs
servers:
  - url: http://localhost:5000/api
    description: Local development server
  - url: https://api.yourapp.com/api
    description: Production server

# Group your endpoints with tags
tags:
  - name: Authentication
    description: Auth related endpoints
  - name: Users
    description: User management endpoints
  # Add more tags for your resources

paths:
  # Authentication endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  minLength: 8
                  example: password123
                username:
                  type: string
                  example: johndoe
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Protected endpoints (require authentication)
  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      security:
        - bearerAuth: []  # Requires JWT token
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Example of CRUD endpoints
  /items:
    get:
      tags:
        - Items
      summary: Get all items
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Items retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Item'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Items
      summary: Create a new item
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: Item name
                description:
                  type: string
                  example: Item description
      responses:
        '201':
          description: Item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'

  /items/{id}:
    get:
      tags:
        - Items
      summary: Get item by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Item found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Items
      summary: Update item
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'

    delete:
      tags:
        - Items
      summary: Delete item
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Item deleted
        '404':
          $ref: '#/components/responses/NotFound'

# Reusable components
components:
  # Security schemes (JWT, API Key, etc.)
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # Reusable schemas
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "123"
        email:
          type: string
          example: user@example.com
        username:
          type: string
          example: johndoe
        createdAt:
          type: string
          format: date-time

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        expiresIn:
          type: integer
          example: 3600

    Item:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: Item name
        description:
          type: string
          example: Item description
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        total:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 10

    Error:
      type: object
      properties:
        error:
          type: string
          example: Error message
        message:
          type: string
          example: Detailed error description
        statusCode:
          type: integer
          example: 400

  # Reusable responses
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized - Invalid or missing token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'